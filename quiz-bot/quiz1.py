import telebot
from telebot import types

# Replace 'YOUR_BOT_TOKEN' with your actual bot token from BotFather
bot = telebot.TeleBot('6101937391:AAGGgKYHmp_-I5sOpaF7XlMuOukXnS7dW8s')

# Questions
questions = [
    "1. Наша команда испытывает достаток в лидерстве?",
    "2. Кажется, что решения являются принудительными по отношению к нам?",
    "3. Людей не поощряют высказываться откровенно.",
    "4. В трудной ситуации каждый берется за свои интересы.",
    "5. Общение нуждается в улучшении.",
    "6. Решения принимаются на неадекватном уровне иерархии.",
    "7. Некоторые менеджеры неискренни сами с собой.",
    "8. Мы редко подвергаем сомнению основное содержание или пользу наших совещаний.",
    "9. Созданы недостаточные возможности для развития.",
    "10. Мы часто ссоримся с другими подразделениями.",
    "11. Члены команды не общаются друг с другом в достаточной мере.",
    "12. Ясно, что организация ожидает от нашей команды.",
    "13. Принятый порядок редко подвергается сомнению.",
    "14. В действительности никому не ясно, куда мы движемся.",
    "15. Люди не говорят, что они в действительности думают.",
    "16. Люди имеют позицию «моя хата с краю».",
    "17. В команде конфликт носит деструктивный характер.",
    "18. Решения основываются на неадекватной информации.",
    "19. Некоторым менеджерам не доверяют.",
    "20. Мы не учимся на своих ошибках.",
    "21. Менеджеры не помогают своим подчиненным учиться.",
    "22. Отношения с другими группами являются прохладными.",
    "23. Мы не обдумываем хорошо наше положение внутри организации.",
    "24. Наша команда «политически» восприимчива.",
    "25. Мы часто обнаруживаем, что нам недостает нужной квалификации.",
    "26. Мы все очень заняты, но, кажется, везде не успеваем.",
    "27. Спорные вопросы прячутся под ковер.",
    "28. Помогло бы, если бы люди имели больше желания признавать свои ошибки.",
    "29. Имеют место недоверие и враждебность.",
    "30. Люди не допускаются к решениям.",
    "31. Мало лояльности к команде.",
    "32. Мнения извне не приветствуются.",
    "33. Следовало бы иметь большую ротацию работ.",
    "34. Мы редко работаем эффективно вместе с другими командами.",
    "35. Нам не удалось обеспечить сотрудничество с другими командами и подразделениями.",
    "36. Способность работать в команде является критерием отбора при поступлении в эту организацию.",
    "37. Никто не налаживает необходимых связей с другими группами.",
    "38. Мы не тратим требуемого времени на планирование будущего.",
    "39. Деликатных вопросов избегают.",
    "40. Бывает, что кому-то «всадили нож в спину».",
    "41. В действительности мы не работаем вместе.",
    "42. Неподходящие люди принимают решения.",
    "43. Менеджеры являются слабыми и не готовы бороться и требовать внимания к своей точке зрения.",
    "44. Я не получаю достаточной обратной связи.",
    "45. Развиваются несоответствующие виды умений.",
    "46. Помощь не придет из других частей организации.",
    "47. Существует сильное непонимание между нашей командой и профсоюзами, которые оказывают давление на нас.",
    "48. В этой организации вознаграждается слаженность работы в команде.",
    "49. Мы не уделяем достаточно внимания взаимоотношениям.",
    "50. Мы не имеем ясного представления о том, чего от нас ожидают.",
    "51. Честность не является характерной чертой нашей команды.",
    "52. Я не чувствую поддержки со стороны моих коллег.",
    "53. Квалификация и информация распределены недостаточно хорошо.",
    "54. Имеются сильные личности, которые идут своим собственным путем.",
    "55. Чувство собственного достоинства не одобряется.",
    "56. Нам следует уделять больше времени обсуждению методов работы.",
    "57. Менеджеры не принимают всерьез личное развитие.",
    "58. Другие части организации нас не понимают.",
    "59. Нам не удается выслушать наших клиентов.",
    "60. Люди в команде имеют хорошие связи с другими членами организации.",
    "61. Часто мы достигаем решений слишком быстро.",
    "62. Образ действий, при котором ценится личность, имеет мало общего с тем, что достигнуто.",
    "63. Слишком много секретов.",
    "64. Конфликтов избегают.",
    "65. Разногласия разлагают.",
    "66. Приверженность к решениям низка.",
    "67. Наши менеджеры полагают, что более строгий надзор улучшает результат.",
    "68. Слишком много запретов в нашей команде.",
    "69. Очевидно, что в другом подразделении имеются лучшие возможности.",
    "70. Мы тратим много энергии на защиту наших границ.",
    "71. Члены команды не понимают, чего от них ожидают.",
    "72. Культура организации поощряет слаженную работу в команде.",
    "73. Мы не уделяем достаточно внимания новым идеям.",
    "74. Приоритеты не ясны.",
    "75. Люди не вовлекаются в достаточной мере в принятие решений.",
    "76. Слишком много взаимных обвинений и упреков.",
    "77. Не всегда выслушивают.",
    "78. Мы не используем в полном объеме навыки, которыми обладаем.",
    "79. Менеджеры полагают, что люди по своему существу ленивы.",
    "80. Мы тратим много времени на то, чтобы делать, и не уделяем достаточно времени тому, чтобы думать.",
    "81. Не поощряется стремление личности к росту.",
    "82. Мы не стараемся понять точку зрения других команд.",
    "83. Нам не удается выслушать наших клиентов.",
    "84. Команда работает в соответствии с целями организации."
]

# Initialize the current question index and answer counts
current_question = 0
answer_counts = {
    "A": 0,
    "B": 0,
    "C": 0,
    "D": 0,
    "E": 0,
    "F": 0,
    "G": 0,
    "H": 0,
    "I": 0,
    "J": 0,
    "K": 0,
    "L": 0,
}

# Mapping of question indices to answer categories
question_to_category = {
    0: "A",
    12: "A",
    24: "A",
    36: "A",
    48: "A",
    60: "A",
    72: "A",
    1: "B",
    13: "B",
    25: "B",
    37: "B",
    49: "B",
    61: "B",
    73: "B",
    2: "C",
    14: "C",
    26: "C",
    38: "C",
    50: "C",
    62: "C",
    74: "C",
    3: "D",
    15: "D",
    27: "D",
    39: "D",
    51: "D",
    63: "D",
    75: "D",
    4: "E",
    16: "E",
    28: "E",
    40: "E",
    52: "E",
    64: "E",
    76: "E",
    5: "F",
    17: "F",
    29: "F",
    41: "F",
    53: "F",
    65: "F",
    77: "F",
    6: "G",
    18: "G",
    30: "G",
    42: "G",
    54: "G",
    66: "G",
    78: "G",
    7: "H",
    19: "H",
    31: "H",
    43: "H",
    55: "H",
    67: "H",
    79: "H",
    8: "I",
    20: "I",
    32: "I",
    44: "I",
    56: "I",
    68: "I",
    80: "I",
    9: "J",
    21: "J",
    33: "J",
    45: "J",
    57: "J",
    69: "J",
    81: "J",
    10: "K",
    22: "K",
    34: "K",
    46: "K",
    58: "K",
    70: "K",
    82: "K",
    11: "L",
    23: "L",
    35: "L",
    47: "L",
    59: "L",
    71: "L",
    83: "L",
}

# Define the start command
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item = types.KeyboardButton("Начать тест")
    markup.add(item)
    bot.send_message(message.chat.id, "Добро пожаловать! Нажмите 'Начать тест', чтобы начать опрос.", reply_markup=markup)

# Start the quiz
@bot.message_handler(func=lambda message: message.text == "Начать тест")
def start_quiz(message):
    global current_question
    current_question = 0
    send_question(message.chat.id)

# Send a question
def send_question(chat_id):
    global current_question
    if current_question < len(questions):
        question = questions[current_question]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("Да")
        item2 = types.KeyboardButton("Нет")
        markup.add(item1, item2)
        bot.send_message(chat_id, question, reply_markup=markup)
    else:
        bot.send_message(chat_id, "Тест завершен. Нажмите /start, чтобы начать снова.")
        display_results(chat_id)

# Handle user answers
@bot.message_handler(func=lambda message: message.text in ["Да", "Нет"])
def handle_answer(message):
    global current_question
    user_answer = message.text
    current_question += 1

    # Check if the current question index corresponds to a category
    if current_question - 1 in question_to_category:
        category = question_to_category[current_question - 1]
        if user_answer == "Да":
            answer_counts[category] += 1

    if current_question < len(questions):
        send_question(message.chat.id)
    else:
        bot.send_message(message.chat.id, "Тест завершен. Нажмите /start, чтобы начать снова.")
        display_results(message.chat.id)

# Display results
def display_results(chat_id):
    max_categories = []
    max_count = max(answer_counts.values())

    results = {
        "A": """Для успешного внедрения методологии ScrumBan команда должна выполнить следующие действия:\n
1. Обучение: Провести обучение команды методологии ScrumBan и ее принципам. Команда должна понимать основные концепции и процессы ScrumBan.\n
2. Определение рабочего процесса: Определить, какие элементы ScrumBan будут использоваться в работе команды. Разработать рабочий процесс, который будет сочетать принципы Scrum и Kanban.\n
3. Создание доски задач: Создать электронную или физическую доску задач, на которой будут отображаться все текущие задачи команды. Доска должна содержать колонки для отслеживания задач в разных стадиях выполнения.\n
4. Планирование и приоритизация задач: Провести планирование и приоритизацию задач на основе требований и приоритетов бизнеса. Разделить задачи на итерации и определить их длительность.\n
5. Ежедневные стендапы: Проводить ежедневные стендапы, на которых каждый член команды сообщает о своем прогрессе, проблемах и планах на день. Стендапы помогают поддерживать прозрачность и координацию в команде.\n
6. Визуализация рабочего процесса: Визуализировать рабочий процесс на доске задач, чтобы каждый член команды мог видеть текущее состояние задач и прогресс работы.\n
7. Управление потоком работы: Отслеживать поток работы и управлять им, чтобы минимизировать задержки и улучшить эффективность команды. Использовать методы Kanban, такие как лимиты WIP (work in progress), чтобы контролировать количество одновременно выполняемых задач.\n
8. Ретроспектива: Проводить регулярные ретроспективы, на которых команда анализирует свою работу, выявляет проблемы и предлагает улучшения. Результаты ретроспективы должны быть использованы для корректировки рабочего процесса.\n
9. Непрерывное улучшение: Постоянно совершенствовать рабочий процесс и применять новые методы и инструменты для повышения эффективности команды.\n
Важно отметить, что методология ScrumBan сочетает в себе принципы гибкости и непрерывного улучшения из Scrum с принципами визуализации и управления потоком работы из Kanban. Команда должна быть готова к изменениям и гибко адаптироваться к новым требованиям и условиям проекта.""",
        "B": """Для успешного внедрения методологии waterfall команда должна выполнить следующие действия:\n
1. Планирование: Определить цели и требования проекта, составить подробный план работ, определить роли и ответственности членов команды.\n
2. Анализ: Провести детальный анализ требований и потребностей пользователей, чтобы определить функциональные и нефункциональные требования к проекту.\n
3. Проектирование: Создать подробное техническое задание, определить архитектуру системы, спроектировать интерфейсы и функциональность.\n
4. Разработка: Начать разработку поэтапно, начиная с основных компонентов системы. Каждый этап разработки должен быть завершен до перехода к следующему.\n
5. Тестирование: Провести тестирование каждого компонента системы на соответствие требованиям и функциональности. При необходимости внести корректировки.\n
6. Внедрение: Завершить разработку и провести окончательное тестирование всей системы. Подготовить документацию и обучить пользователей.\n
7. Сопровождение: Обеспечить поддержку и сопровождение системы после ее внедрения. Выполнять исправление ошибок, устранение неполадок и обновление функциональности при необходимости.\n\n

Для успешного внедрения методологии Prince2 команда должна выполнить следующие действия:\n
1. Обучение: Провести обучение команды методологии Prince2 и ее принципам. Команда должна понимать основные концепции и процессы Prince2, а также роли и ответственности каждого участника команды.\n
2. Определение рабочего процесса: Определить, какие элементы Prince2 будут использоваться в работе команды. Разработать рабочий процесс, который будет сочетать принципы Prince2 и учитывать специфику проекта.\n
3. Создание плана проекта: Создать план проекта, включающий определение целей, ожидаемых результатов, ролей и ответственностей, а также временные рамки и бюджет проекта.\n
4. Управление рисками: Идентифицировать и оценить риски, связанные с проектом, и разработать стратегии для их управления. Включить регулярное отслеживание и анализ рисков в рабочий процесс команды.\n
5. Управление изменениями: Разработать процедуры для управления изменениями в проекте. Определить критерии для принятия решений о внесении изменений и установить механизмы для их контроля и утверждения.\n
6. Контроль качества: Определить методы и метрики для контроля качества работы команды. Разработать процедуры для проверки соответствия результатов проекта установленным стандартам и требованиям.\n
7. Регулярное отчетность: Установить механизмы для регулярной отчетности о прогрессе проекта и достижении поставленных целей. Отчеты должны быть понятными и информативными для всех заинтересованных сторон.\n
8. Управление коммуникациями: Разработать план коммуникаций, определяющий как, когда и с кем будет осуществляться обмен информацией в рамках проекта. Обеспечить своевременную и эффективную коммуникацию между членами команды и заинтересованными сторонами.\n
9. Регулярные обзоры проекта: Проводить регулярные обзоры проекта, на которых команда анализирует прогресс работы, выявляет проблемы и предлагает улучшения. Результаты обзоров должны быть использованы для корректировки рабочего процесса.\n
10. Непрерывное улучшение: Постоянно совершенствовать рабочий процесс и применять новые методы и инструменты для повышения эффективности команды.\n
Важно отметить, что методология Prince2 предоставляет структурированный подход к управлению проектами и подразумевает строгое следование определенным процессам и ролям. Команда должна быть готова к документированию и формализации работы, а также к регулярной отчетности о прогрессе проекта.""",
        "C": """Для успешного внедрения модели хаоса команда должна выполнить следующие действия:\n
"1. Разделение ответственности: Команда должна определить роли и ответственности каждого члена команды, выделить главные задачи, чтобы обеспечить эффективное управление хаосом.\n
2. Гибкое планирование: Команда должна гибко планировать свою работу, основываясь на текущих требованиях и обратной связи от заказчика и пользователей.\n
3. Быстрые итерации: Команда должна выполнять быстрые итерации разработки, чтобы максимально быстро получать обратную связь и вносить необходимые изменения.\n
4. Активное тестирование: Команда должна активно проводить тестирование продукта на каждом этапе разработки, чтобы быстро выявлять ошибки и дефекты.\n
5. Открытая коммуникация: Команда должна поддерживать открытую коммуникацию с заказчиком и пользователями, чтобы быстро получать обратную связь и реагировать на изменения требований.\n
6. Постоянное обучение и самообучение: Команда должна постоянно обучаться новым технологиям и методам разработки, чтобы быть готовой к изменениям и вызовам хаоса.\n
7. Постоянное совершенствование: Команда должна постоянно совершенствовать свой подход к разработке, основываясь на опыте и обратной связи, чтобы достичь максимальной эффективности и качества продукта.\n\n

Для успешного внедрения методологии экстремального программирования (XP) команда должна выполнить следующие действия:\n
1. Ознакомление с методологией: Команда должна изучить основные принципы и концепции экстремального программирования, а также ознакомиться с его стандартами и рекомендациями.\n
2. Определение проекта: Определить проект, для которого будет применяться методология XP. Учесть его цели, ограничения, стейкхолдеров и другие факторы, которые могут повлиять на разработку программного продукта.\n
3. Выбор практик: Выбрать необходимые практики из методологии XP, которые наиболее соответствуют требованиям и характеристикам проекта. Учесть особенности проекта и его контекста.\n
4. Создание плана разработки: Разработать план разработки программного продукта, включающий в себя все необходимые практики и их последовательность. Определить роли и ответственности каждого участника команды.\n
5. Итеративное выполнение практик: Выполнять выбранные практики, определенные в плане разработки, согласно их последовательности. Учитывать все рекомендации и стандарты методологии XP при выполнении каждой практики.\n
6. Регулярный обзор и адаптация: Регулярно обозревать прогресс выполнения практик и сравнивать его с планом разработки. Идентифицировать задачи, которые могут стать критическими и препятствовать разработке программного продукта в срок. Принимать меры по устранению задержек и оптимизации процесса разработки.""",
        "D": """Для успешного внедрения методологии ScrumBan команда должна выполнить следующие действия:\n
1. Обучение: Провести обучение команды методологии ScrumBan и ее принципам. Команда должна понимать основные концепции и процессы ScrumBan.\n
2. Определение рабочего процесса: Определить, какие элементы ScrumBan будут использоваться в работе команды. Разработать рабочий процесс, который будет сочетать принципы Scrum и Kanban.\n
3. Создание доски задач: Создать электронную или физическую доску задач, на которой будут отображаться все текущие задачи команды. Доска должна содержать колонки для отслеживания задач в разных стадиях выполнения.\n
4. Планирование и приоритизация задач: Провести планирование и приоритизацию задач на основе требований и приоритетов бизнеса. Разделить задачи на итерации и определить их длительность.\n
5. Ежедневные стендапы: Проводить ежедневные стендапы, на которых каждый член команды сообщает о своем прогрессе, проблемах и планах на день. Стендапы помогают поддерживать прозрачность и координацию в команде.\n
6. Визуализация рабочего процесса: Визуализировать рабочий процесс на доске задач, чтобы каждый член команды мог видеть текущее состояние задач и прогресс работы.\n
7. Управление потоком работы: Отслеживать поток работы и управлять им, чтобы минимизировать задержки и улучшить эффективность команды. Использовать методы Kanban, такие как лимиты WIP (work in progress), чтобы контролировать количество одновременно выполняемых задач.\n
8. Ретроспектива: Проводить регулярные ретроспективы, на которых команда анализирует свою работу, выявляет проблемы и предлагает улучшения. Результаты ретроспективы должны быть использованы для корректировки рабочего процесса.\n
9. Непрерывное улучшение: Постоянно совершенствовать рабочий процесс и применять новые методы и инструменты для повышения эффективности команды.\n
Важно отметить, что методология ScrumBan сочетает в себе принципы гибкости и непрерывного улучшения из Scrum с принципами визуализации и управления потоком работы из Kanban. Команда должна быть готова к изменениям и гибко адаптироваться к новым требованиям и условиям проекта.""",
        "E": """Для успешного внедрения методологии code and fix команда должна выполнить следующие действия:\n
1. Определение требований: Команда должна определить основные требования к разрабатываемому продукту и учесть их приоритеты.\n
2. Разработка и исправление кода: Команда должна начать разработку продукта, используя подход ""код и исправление"". Это означает, что команда пишет код и исправляет ошибки по мере их обнаружения.\n
3. Тестирование продукта: Команда должна проводить тестирование продукта на каждом этапе разработки, чтобы выявить ошибки и дефекты.\n
4. Обратная связь от заказчика и пользователей: Команда должна активно обмениваться информацией с заказчиком и пользователями, чтобы получить обратную связь по продукту и внести необходимые изменения.\n
5. Постоянное совершенствование: Команда должна постоянно совершенствовать код и исправлять ошибки на основе обратной связи и опыта.\n
Важно отметить, что методология code and fix является менее структурированной по сравнению с другими методологиями разработки, поэтому команда должна быть готова к гибкости и адаптации в процессе работы.""",
        "F": """Для внедрения Kanban-методологии в работу команды нужно поочередно ввести 6 практик:\n
1. Создать канбан-доску (Первый шаг - визуализация задач и процессов; нужно понять, какие повторяющиеся этапы есть в работе над задачами; затем сделать колонку для каждого этапа)\n 
2. Ограничить незавершенные задачи (Если лимит превышен, то проджект-менеджер не может передать новую задачу от заказчика, пока не будет завершена одна из текущих)\n 
3. Управлять потоком (Чтобы движение потока было равномерным и прогнозируемым, нужно найти и устранить «бутылочные горлышки» — места, в которых рабочий процесс замедляется. Для этого вводят метрики для отслеживания скорости движения задач между статусами. ) \n
4. Объяснить правила (Правила должны быть понятны и прозрачны для всех участников рабочего процесса) \n
5. Ввести петли обратной связи (на регулярных встречах обсуждают проблемы, стратегию и что можно улучшить) \n
6. Улучшать процессы (В Kanban есть модель зрелости. По ней определяют, на каком уровне внедрения методологии находится команда или вся организация. Сравнивая текущую ситуацию с моделью, можно понять, какие нужны улучшения, чтобы сдвинуться на следующий уровень, и какие проблемы в процессах стоит устранить.)\n\n

Для успешного внедрения методологии waterfall команда должна выполнить следующие действия:\n
1. Планирование: Определить цели и требования проекта, составить подробный план работ, определить роли и ответственности членов команды.\n
2. Анализ: Провести детальный анализ требований и потребностей пользователей, чтобы определить функциональные и нефункциональные требования к проекту.\n
3. Проектирование: Создать подробное техническое задание, определить архитектуру системы, спроектировать интерфейсы и функциональность.\n
4. Разработка: Начать разработку поэтапно, начиная с основных компонентов системы. Каждый этап разработки должен быть завершен до перехода к следующему.\n
5. Тестирование: Провести тестирование каждого компонента системы на соответствие требованиям и функциональности. При необходимости внести корректировки.\n
6. Внедрение: Завершить разработку и провести окончательное тестирование всей системы. Подготовить документацию и обучить пользователей.\n
7. Сопровождение: Обеспечить поддержку и сопровождение системы после ее внедрения. Выполнять исправление ошибок, устранение неполадок и обновление функциональности при необходимости.\n\n

Для успешного внедрения методологии Prince2 команда должна выполнить следующие действия:\n
1. Обучение: Провести обучение команды методологии Prince2 и ее принципам. Команда должна понимать основные концепции и процессы Prince2, а также роли и ответственности каждого участника команды.\n
2. Определение рабочего процесса: Определить, какие элементы Prince2 будут использоваться в работе команды. Разработать рабочий процесс, который будет сочетать принципы Prince2 и учитывать специфику проекта.\n
3. Создание плана проекта: Создать план проекта, включающий определение целей, ожидаемых результатов, ролей и ответственностей, а также временные рамки и бюджет проекта.\n
4. Управление рисками: Идентифицировать и оценить риски, связанные с проектом, и разработать стратегии для их управления. Включить регулярное отслеживание и анализ рисков в рабочий процесс команды.\n
5. Управление изменениями: Разработать процедуры для управления изменениями в проекте. Определить критерии для принятия решений о внесении изменений и установить механизмы для их контроля и утверждения.\n
6. Контроль качества: Определить методы и метрики для контроля качества работы команды. Разработать процедуры для проверки соответствия результатов проекта установленным стандартам и требованиям.\n
7. Регулярное отчетность: Установить механизмы для регулярной отчетности о прогрессе проекта и достижении поставленных целей. Отчеты должны быть понятными и информативными для всех заинтересованных сторон.\n
8. Управление коммуникациями: Разработать план коммуникаций, определяющий как, когда и с кем будет осуществляться обмен информацией в рамках проекта. Обеспечить своевременную и эффективную коммуникацию между членами команды и заинтересованными сторонами.\n
9. Регулярные обзоры проекта: Проводить регулярные обзоры проекта, на которых команда анализирует прогресс работы, выявляет проблемы и предлагает улучшения. Результаты обзоров должны быть использованы для корректировки рабочего процесса.\n
10. Непрерывное улучшение: Постоянно совершенствовать рабочий процесс и применять новые методы и инструменты для повышения эффективности команды.\n
Важно отметить, что методология Prince2 предоставляет структурированный подход к управлению проектами и подразумевает строгое следование определенным процессам и ролям. Команда должна быть готова к документированию и формализации работы, а также к регулярной отчетности о прогрессе проекта.""",
        "G": """Для успешного внедрения метода критического пути команда должна выполнить следующие действия:\n
1. Определение проекта: Определить проект, для которого будет применяться метод критического пути. Выбрать проект, который имеет жесткий срок выполнения и зависимости между задачами.\n
2. Идентификация задач: Идентифицировать все задачи, необходимые для выполнения проекта. Определить зависимости между задачами и последовательность их выполнения.\n
3. Оценка времени выполнения задач: Оценить время, необходимое для выполнения каждой задачи в проекте. Учесть возможные риски и неопределенности, которые могут повлиять на время выполнения.\n
4. Создание сетевой модели: Создать сетевую модель проекта, используя зависимости и оценки времени выполнения задач. Определить критический путь - последовательность задач, которая определяет минимальное время выполнения всего проекта.\n
5. Расчет времени выполнения проекта: Рассчитать общее время выполнения проекта, основываясь на времени выполнения задач в критическом пути. Определить ключевые моменты и сроки, которые необходимо соблюдать для успешного завершения проекта.\n
6. Управление ресурсами: Определить необходимые ресурсы для выполнения каждой задачи в проекте. Распределить ресурсы эффективно, чтобы минимизировать время выполнения проекта и избежать перегрузки ресурсов.\n
7. Мониторинг и контроль: Регулярно отслеживать прогресс выполнения задач и сравнивать его с планом. Идентифицировать задачи, которые могут стать критическими и препятствовать выполнению проекта в срок. Принимать меры по устранению задержек и оптимизации процесса выполнения проекта.\n
8. Коммуникация и сотрудничество: Обеспечить эффективную коммуникацию и сотрудничество в команде проекта. Регулярно обмениваться информацией о прогрессе выполнения задач и проблемах, возникающих на пути.\n
9. Анализ и улучшение: Проводить анализ выполнения проекта и идентифицировать участки, где можно улучшить процесс. Применять методы оптимизации и улучшения критического пути для повышения эффективности и сокращения времени выполнения проектов.\n
10. Непрерывное обучение: Постоянно обучаться и совершенствовать навыки в применении метода критического пути. Изучать новые инструменты и подходы, которые могут помочь в оптимизации процесса управления проектами.\n
Важно отметить, что метод критического пути является инструментом для планирования и управления проектами. Команда должна быть готова к анализу зависимостей задач, оценке времени выполнения и управлению ресурсами для успешного внедрения метода критического пути.""",
        "H": """Для успешного внедрения методологии ScrumBan команда должна выполнить следующие действия:\n
1. Обучение: Провести обучение команды методологии ScrumBan и ее принципам. Команда должна понимать основные концепции и процессы ScrumBan.\n
2. Определение рабочего процесса: Определить, какие элементы ScrumBan будут использоваться в работе команды. Разработать рабочий процесс, который будет сочетать принципы Scrum и Kanban.\n
3. Создание доски задач: Создать электронную или физическую доску задач, на которой будут отображаться все текущие задачи команды. Доска должна содержать колонки для отслеживания задач в разных стадиях выполнения.\n
4. Планирование и приоритизация задач: Провести планирование и приоритизацию задач на основе требований и приоритетов бизнеса. Разделить задачи на итерации и определить их длительность.\n
5. Ежедневные стендапы: Проводить ежедневные стендапы, на которых каждый член команды сообщает о своем прогрессе, проблемах и планах на день. Стендапы помогают поддерживать прозрачность и координацию в команде.\n
6. Визуализация рабочего процесса: Визуализировать рабочий процесс на доске задач, чтобы каждый член команды мог видеть текущее состояние задач и прогресс работы.\n
7. Управление потоком работы: Отслеживать поток работы и управлять им, чтобы минимизировать задержки и улучшить эффективность команды. Использовать методы Kanban, такие как лимиты WIP (work in progress), чтобы контролировать количество одновременно выполняемых задач.\n
8. Ретроспектива: Проводить регулярные ретроспективы, на которых команда анализирует свою работу, выявляет проблемы и предлагает улучшения. Результаты ретроспективы должны быть использованы для корректировки рабочего процесса.\n
9. Непрерывное улучшение: Постоянно совершенствовать рабочий процесс и применять новые методы и инструменты для повышения эффективности команды.\n
Важно отметить, что методология ScrumBan сочетает в себе принципы гибкости и непрерывного улучшения из Scrum с принципами визуализации и управления потоком работы из Kanban. Команда должна быть готова к изменениям и гибко адаптироваться к новым требованиям и условиям проекта.\n\n

Для успешного внедрения методологии Prototype Model команда должна выполнить следующие действия:\n
1. Определить цели и требования для создания прототипа модели.\n
2. Разработать и создать прототип модели, основываясь на определенных целях и требованиях.\n
3. Провести тестирование прототипа модели, чтобы выявить возможные ошибки и дефекты.\n
4. Получить обратную связь от заказчика и пользователей по прототипу модели и внести необходимые изменения.\n
5. Повторить процесс разработки, тестирования и получения обратной связи до достижения желаемого результата и удовлетворения требований.""",
        "I": """Следует использовать подход DMADV:\n
D - Define (определение) - здесь необходимо выделить цель создания продукта или услуги;\n
M - Measure (измерение) - необходимо определить, что хочет и ожидает клиент или заказчик, каковы его требования;\n
A - Analyze - нужно поискать альтернативные решения; провести бенчмаркинг, сравнительный анализ, чтобы найти интересные функции и решения для соответствия ранее заявленным требованиям\n
D - Design - на этом этапе идет полноценная детальная разработка\n
V - Verify (проверка) - идет проверка прототипа и тестирование перед полноценным запуском продукта\n\n

Для успешного внедрения методологии инкрементная модель команда должна выполнить следующие действия:\n
1. Ознакомление с методологией: Команда должна изучить основные принципы и концепции инкрементной модели, а также ознакомиться с ее стандартами и рекомендациями.\n
2. Определение проекта: Определить проект, для которого будет применяться методология инкрементная модель. Учесть его цели, ограничения, стейкхолдеров и другие факторы, которые могут повлиять на разработку программного продукта.\n
3. Разработка базового функционала: Определить и разработать базовый функционал программного продукта, который будет представлять первый инкремент. Учесть требования и ожидания заказчика.\n
4. Проведение итераций: Проводить итерации разработки, в каждой из которых добавляется новый функционал или улучшается уже существующий. Каждая итерация должна быть закончена и протестирована перед переходом к следующей.\n
5. Тестирование и обратная связь: После каждой итерации проводить тестирование, чтобы убедиться в соответствии продукта требованиям. Получать обратную связь от заказчика и вносить необходимые корректировки.""",
        "J": """Для успешного внедрения методологии RAD-модель команда должна выполнить следующие действия:\n
1. Ознакомление с методологией: Команда должна изучить основные принципы и концепции RAD-модели, а также ознакомиться с ее стандартами и рекомендациями.\n
2. Определение проекта: Определить проект, для которого будет применяться методология RAD-модель. Учесть его цели, ограничения, стейкхолдеров и другие факторы, которые могут повлиять на разработку программного продукта.\n
3. Разработка прототипа: Разработать быстрый прототип программного продукта, который будет представлять основные функциональные возможности. Учесть требования и ожидания заказчика.\n
4. Проведение итераций: Проводить итерации разработки, в каждой из которых добавляется новый функционал или улучшается уже существующий. Каждая итерация должна быть закончена и протестирована перед переходом к следующей.\n
5. Тестирование и обратная связь: После каждой итерации проводить тестирование, чтобы убедиться в соответствии продукта требованиям. Получать обратную связь от заказчика и вносить необходимые корректировки.\n
6. Участие заказчика: Включить заказчика в процесс разработки, чтобы он мог оценить прототип и давать обратную связь. Это поможет уточнить требования и сократить время разработки.\n
7. Быстрая коммуникация: Обеспечить быструю коммуникацию внутри команды и с заказчиком, чтобы оперативно реагировать на изменения и проблемы, возникающие в процессе разработки.\n
Важно отметить, что методология RAD-модель позволяет команде быстро разрабатывать и тестировать прототипы, что способствует быстрому достижению результатов. Команда должна быть готова к частым изменениям и гибко адаптироваться к новым требованиям заказчика.""",
        "K": """Для успешного внедрения методологии ScrumBan команда должна выполнить следующие действия:\n
1. Обучение: Провести обучение команды методологии ScrumBan и ее принципам. Команда должна понимать основные концепции и процессы ScrumBan.\n
2. Определение рабочего процесса: Определить, какие элементы ScrumBan будут использоваться в работе команды. Разработать рабочий процесс, который будет сочетать принципы Scrum и Kanban.\n
3. Создание доски задач: Создать электронную или физическую доску задач, на которой будут отображаться все текущие задачи команды. Доска должна содержать колонки для отслеживания задач в разных стадиях выполнения.\n
4. Планирование и приоритизация задач: Провести планирование и приоритизацию задач на основе требований и приоритетов бизнеса. Разделить задачи на итерации и определить их длительность.\n
5. Ежедневные стендапы: Проводить ежедневные стендапы, на которых каждый член команды сообщает о своем прогрессе, проблемах и планах на день. Стендапы помогают поддерживать прозрачность и координацию в команде.\n
6. Визуализация рабочего процесса: Визуализировать рабочий процесс на доске задач, чтобы каждый член команды мог видеть текущее состояние задач и прогресс работы.\n
7. Управление потоком работы: Отслеживать поток работы и управлять им, чтобы минимизировать задержки и улучшить эффективность команды. Использовать методы Kanban, такие как лимиты WIP (work in progress), чтобы контролировать количество одновременно выполняемых задач.\n
8. Ретроспектива: Проводить регулярные ретроспективы, на которых команда анализирует свою работу, выявляет проблемы и предлагает улучшения. Результаты ретроспективы должны быть использованы для корректировки рабочего процесса.\n
9. Непрерывное улучшение: Постоянно совершенствовать рабочий процесс и применять новые методы и инструменты для повышения эффективности команды.\n
Важно отметить, что методология ScrumBan сочетает в себе принципы гибкости и непрерывного улучшения из Scrum с принципами визуализации и управления потоком работы из Kanban. Команда должна быть готова к изменениям и гибко адаптироваться к новым требованиям и условиям проекта.""",
        "L": """Для успешного внедрения методологии V модель команда должна выполнить следующие действия:\n
1. Ознакомление с методологией: Команда должна изучить основные принципы и концепции V модели, а также ознакомиться с ее стандартами и рекомендациями.\n
2. Определение проекта: Определить проект, для которого будет применяться методология V модель. Учесть его цели, ограничения, стейкхолдеров и другие факторы, которые могут повлиять на разработку программного продукта.\n
3. Разработка требований: Определить и документировать требования к программному продукту, включая функциональные и нефункциональные требования. Учесть все необходимые аспекты и спецификации.\n
4. Создание плана разработки: Разработать план разработки программного продукта, включающий в себя все необходимые этапы и активности. Определить роли и ответственности каждого участника команды.\n
5. Реализация и тестирование: Выполнять разработку программного продукта в соответствии с определенным планом. После каждого этапа разработки проводить тестирование, чтобы убедиться в соответствии продукта требованиям.\n
6. Верификация и валидация: Провести верификацию и валидацию программного продукта, чтобы убедиться в его соответствии требованиям и ожиданиям заказчика. При необходимости внести корректировки и улучшения.""",
    }

    for category, count in answer_counts.items():
        if count == max_count:
            max_categories.append(category)

    if max_categories:
        result_message = "Категории с наибольшим количеством ответов 'Да':\n"
        for category in max_categories:
            result_message += f"{results[category]}\n"
    else:
        result_message = "Все категории имеют одинаковое количество ответов 'Да'.\n"

    bot.send_message(chat_id, result_message)

if __name__ == '__main__':
    bot.polling(none_stop=True)
